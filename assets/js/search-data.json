{
  
    
        "post0": {
            "title": "Single Cell Classification",
            "content": "Group Members: . Johannes Ehlers Nyholm Thomsen | Kaare Veggerby Sandbøl | Kasper Malmsiø Hoffmann | Mike Holst Meldgaard | . import pandas as pd import numpy as np import os import io import base64 from tqdm import tqdm from PIL import Image import matplotlib.pyplot as plt import seaborn as sns %matplotlib inline from fastai.vision.all import * import torch.nn.functional as nnf import torch torch.cuda.empty_cache() from fastai.callback.all import * . from scclib.util.image import create_samples, assemble_rgb_image, get_rgb_pieces_tensors, HPAImage . Collect data: . Vores data, som er udleveret fra Kaggle, skal vi have samlet i det udleverede data til en kanal. Et billede er udleveret som 4 greyscaled billeder, hvor hvert greyscaled billede repræsenterer rød, grøn, blå og gul farve af det samlede billede. . I denne konkurrences forum har folk konkluderet, at den gule del af billedet har ingen indflydelse på modellernes præcision, hvorfor vi har valgt at sortere den fra. . Vi skal derfor have samlet de 3 RBG billeder til et samlet billede. Til at gøre dette har vi lavet et hjælpe bibliotek, da det bare er en masse python kode. Koden tager de 3 billeder, putter deres data i den respektive farve kanal for et samlet billede og resizer til en ønsket størrelse. Vi resizer allerede her, da vi så kan gøre det på GPU i stedet for CPU&#39;en. . cuda0 = torch.device(&#39;cuda:0&#39;) . data_path = Path(&#39;Z: cloud data hpa-single-cell-image-classification&#39;) path = Path(&#39;../data&#39;) . df = pd.read_csv(data_path/&#39;train.csv&#39;) . df.head() . ID Label . 0 5c27f04c-bb99-11e8-b2b9-ac1f6b6435d0 | 8|5|0 | . 1 5fb643ee-bb99-11e8-b2b9-ac1f6b6435d0 | 14|0 | . 2 60b57878-bb99-11e8-b2b9-ac1f6b6435d0 | 6|1 | . 3 5c1a898e-bb99-11e8-b2b9-ac1f6b6435d0 | 16|10 | . 4 5b931256-bb99-11e8-b2b9-ac1f6b6435d0 | 14|0 | . labels = [str(i) for i in range(19)] for x in labels: df[x] = df[&#39;Label&#39;].apply(lambda r: int(x in r.split(&#39;|&#39;))) df.head() . ID Label 0 1 2 3 4 5 6 7 ... 9 10 11 12 13 14 15 16 17 18 . 0 5c27f04c-bb99-11e8-b2b9-ac1f6b6435d0 | 8|5|0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 5fb643ee-bb99-11e8-b2b9-ac1f6b6435d0 | 14|0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | . 2 60b57878-bb99-11e8-b2b9-ac1f6b6435d0 | 6|1 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 3 5c1a898e-bb99-11e8-b2b9-ac1f6b6435d0 | 16|10 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | . 4 5b931256-bb99-11e8-b2b9-ac1f6b6435d0 | 14|0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | . 5 rows × 21 columns . dfs_0 = df[df[&#39;Label&#39;] == &#39;0&#39;].sample(n=300, random_state=42).reset_index(drop=True) dfs_1 = df[df[&#39;1&#39;] == 1].sample(n=400, random_state=42).reset_index(drop=True) dfs_1u = df[df[&#39;Label&#39;] == &#39;1&#39;].sample(n=221, random_state=42).reset_index(drop=True) dfs_2 = df[df[&#39;Label&#39;] == &#39;2&#39;].sample(n=500, random_state=42).reset_index(drop=True) dfs_3 = df[df[&#39;Label&#39;] == &#39;3&#39;].sample(n=500, random_state=42).reset_index(drop=True) dfs_4 = df[df[&#39;Label&#39;] == &#39;4&#39;].sample(n=500, random_state=42).reset_index(drop=True) dfs_5 = df[df[&#39;Label&#39;] == &#39;5&#39;].sample(n=500, random_state=42).reset_index(drop=True) dfs_6 = df[df[&#39;6&#39;] == 1].sample(n=500, random_state=42).reset_index(drop=True) dfs_7 = df[df[&#39;Label&#39;] == &#39;7&#39;].sample(n=500, random_state=42).reset_index(drop=True) dfs_8 = df[df[&#39;Label&#39;] == &#39;8&#39;].sample(n=500, random_state=42).reset_index(drop=True) dfs_9 = df[df[&#39;9&#39;] == 1].sample(n=400, random_state=42).reset_index(drop=True) dfs_9u = df[df[&#39;Label&#39;] == &#39;9&#39;].sample(n=200, random_state=42).reset_index(drop=True) dfs_10 = df[df[&#39;10&#39;] == 1].sample(n=400, random_state=42).reset_index(drop=True) dfs_10u = df[df[&#39;Label&#39;] == &#39;10&#39;].sample(n=200, random_state=42).reset_index(drop=True) dfs_11 = df[df[&#39;11&#39;] == 1].reset_index(drop=True) dfs_12 = df[df[&#39;Label&#39;] == &#39;12&#39;].sample(n=500, random_state=42).reset_index(drop=True) dfs_13 = df[df[&#39;Label&#39;] == &#39;13&#39;].sample(n=400, random_state=42).reset_index(drop=True) dfs_14 = df[df[&#39;Label&#39;] == &#39;14&#39;].sample(n=500, random_state=42).reset_index(drop=True) dfs_15 = df[df[&#39;15&#39;] == 1].reset_index(drop=True) dfs_16 = df[df[&#39;Label&#39;] == &#39;16&#39;].sample(n=350, random_state=42).reset_index(drop=True) dfs_17 = df[df[&#39;17&#39;] == 1].sample(n=500, random_state=42).reset_index(drop=True) dfs_18 = df[df[&#39;18&#39;] == 1].reset_index(drop=True) dfs_ = [dfs_0, dfs_1, dfs_1u, dfs_2, dfs_3, dfs_4, dfs_5, dfs_6, dfs_7, dfs_8, dfs_9, dfs_9u, dfs_10, dfs_10u, dfs_11, dfs_12, dfs_13, dfs_14, dfs_15, dfs_16, dfs_17, dfs_18] . dfs = pd.concat(dfs_, ignore_index=True) dfs.drop_duplicates(inplace=True, ignore_index=True) . data_path = Path(&#39;../data&#39;) image_path = Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/train&#39;) image_destination = data_path/&#39;train&#39; if not image_destination.exists(): os.makedirs(image_destination) . example_image = image_path.ls()[0].name image_id, image_ext = example_image.split(&#39;.&#39;) image_id = image_id.split(&#39;_&#39;)[0] . Data Preparation: . Billederne bliver udleveret i en kvalitet af 1080p og op efter. Vi har valgt at resize dem til 512 gange 512 for at bevare nok billede kvalitet men også undgå at løbe tør for hukkomelse på computeren. . Efter vi har fundet dataen skal vi have loaded dem ind i en dataloader. Samtidig med at vi gør det cropper vi også billederne ned til 256 gange 256 opløsning, og da vi bruger batch_tfms sker der en tilfældig crop og augmentering. Der sker dog kun resizing på valideringssettet. . Vi har altså været nød til selv manuelt at implementere den fremgangsmåde, som fastai kalder presizing, da vores udleverede billeder er i så høj kvalitet. Vi interpolerer dog 2 gange i stedet for kun én gang, som hvis vi brugte fastai presizing, hvilket resulterer i en ringere billedkvalitet, men vi vinder performance. . new_img = HPAImage(id=image_id, ext=image_ext, path=image_path, device=&quot;cuda:0&quot;, size=512) new_img.plot_all() . C: Users Marianne source repos SingleCellClassification scclib util image.py:141: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at .. torch csrc utils tensor_numpy.cpp:141.) return torch.from_numpy(arr) . create_samples(512, dfs, image_path, image_destination, csv_path=data_path/&#39;cells_sample.csv&#39;, device=&quot;cuda:0&quot;) . 100%|██████████| 7960/7960 [00:02&lt;00:00, 3480.55it/s] . models_path = Path(&#39;../models&#39;) path = Path(&#39;../data&#39;) . cell_df = pd.read_csv(path/&#39;cells_sample.csv&#39;) cell_df.head() . image_id image_labels . 0 0e63afe6-bbca-11e8-b2bc-ac1f6b6435d0 | 0 | . 1 6166673c-bbad-11e8-b2ba-ac1f6b6435d0 | 0 | . 2 2533bcc2-bba5-11e8-b2ba-ac1f6b6435d0 | 0 | . 3 280f88c2-bba5-11e8-b2ba-ac1f6b6435d0 | 0 | . 4 13669cc6-bbaa-11e8-b2ba-ac1f6b6435d0 | 0 | . def get_x(r): return path/&#39;train&#39;/f&quot;{r[&#39;image_id&#39;]}.png&quot; def get_y(r): return r[&#39;image_labels&#39;].split(&#39;|&#39;) . def get_dls(bs: int, size: int): return DataBlock(blocks=(ImageBlock, MultiCategoryBlock), splitter=RandomSplitter(seed=42), get_x=get_x, get_y=get_y, batch_tfms=aug_transforms(size=size, min_scale=0.75)) .dataloaders(cell_df, bs=bs, num_workers=0) . batch_size = 64 image_size = 256 dls = get_dls(batch_size, image_size) . dls.show_batch() . Choose Model: . Vi har valgt at bruge et residualt netværk, som er trænet på ImageNet. I vores model er det kun et netværk med 18 lag, så vi ikke skal vente hundrede år mellem hver træning, når vi eksperimenterer med modellen. Derudover så vi ikke en markant højere præcision, da vi trænede med modellen med 50 lag. Det kan også ses, at vi bruger fp16 for at spare regnekraft mens vi træner. . learn = cnn_learner(dls, resnet18, metrics=partial(accuracy_multi, thresh=0.2)).to_fp16() . Evaluation: . Til vores models metric bruger vi standard præcision for multicategory, hvilket er accuracy_multi. Vi vil dog gerne have en threshhold på 0.2, derfor er vi nød til at give mertics en partial, hvilket betyder at der laves en ny version af accuracy_multi, hvor threshold er den værdi vi sender med i partial. . Tuning: . Da vi har valgt at bruge en på-forhånd trænet model, ResNet, er vi nød til at finjustere den til vores problem. Dette gøres ved at kalde fine_tune på vores learner. fine_tune smider det sidste linære lag i modellen væk og skifter det ud med et nyt linært lag. Dernæst fryser modellen vægtene i alle de gamle lag, og træner nu det nye linære lag i en epoche. Derefter tøes de frosne lag op og modellen trænes nu sammen i det ønskede antal gange - her er det 5. . På denne måde undgår vi at smide alt den træning modellen har fra ImageNet væk, og modellen bliver stadig optimeret til lige vores problemstilling. . learn.lr_find() . . SuggestedLRs(lr_min=0.04365158379077912, lr_steep=0.033113110810518265) . with learn.no_bar(): learn.fine_tune(10, base_lr=0.03) . [0, 0.34980544447898865, 0.21575936675071716, 0.897976815700531, &#39;01:12&#39;] [0, 0.19443851709365845, 0.17364072799682617, 0.9226064085960388, &#39;01:13&#39;] [1, 0.17741426825523376, 0.23870453238487244, 0.890835702419281, &#39;01:13&#39;] [2, 0.1630779206752777, 0.18634462356567383, 0.9153332710266113, &#39;01:16&#39;] [3, 0.1506965458393097, 0.17100191116333008, 0.9302763342857361, &#39;01:15&#39;] [4, 0.138868510723114, 0.16251589357852936, 0.9270033240318298, &#39;01:12&#39;] [5, 0.12858404219150543, 0.1374361515045166, 0.9359297156333923, &#39;01:12&#39;] [6, 0.11740823090076447, 0.12153063714504242, 0.9489883184432983, &#39;01:12&#39;] [7, 0.10452622920274734, 0.12300284951925278, 0.9457483887672424, &#39;01:13&#39;] [8, 0.09402365237474442, 0.11247400939464569, 0.9501455426216125, &#39;01:09&#39;] [9, 0.08716251701116562, 0.11231212317943573, 0.9507405757904053, &#39;01:10&#39;] . class Hook: def hook_func(self, model, input, output): self.stored = output.detach().clone() . hook_output = Hook() hook = learn.model[0].register_forward_hook(hook_output.hook_func) . x = dls.one_batch()[0][0].unsqueeze(0) . print(x.shape) print(x) . torch.Size([1, 3, 256, 256]) TensorImage([[[[-2.0231, -2.0357, -2.0299, ..., -1.6746, -1.4395, -1.5836], [-2.0286, -2.0056, -2.0632, ..., -1.7627, -1.6788, -1.6909], [-2.0218, -2.0498, -2.0858, ..., -1.7766, -1.6992, -1.6864], ..., [-0.7180, -1.8194, -1.9184, ..., -1.5146, -0.9398, -0.9181], [-1.6267, -1.8597, -1.9624, ..., -1.5632, -1.5681, -1.2201], [-1.8928, -1.9339, -1.9746, ..., -1.0895, -0.1448, -0.5516]], [[-2.0302, -1.9965, -2.0278, ..., -1.9795, -2.0335, -2.0310], [-2.0306, -2.0083, -2.0152, ..., -1.7657, -2.0251, -2.0326], [-2.0229, -2.0334, -2.0357, ..., -1.9133, -2.0004, -1.9826], ..., [-1.9782, -1.9471, -2.0050, ..., -1.9584, -1.8945, -1.9435], [-1.9265, -1.9703, -1.9974, ..., -1.8735, -1.7904, -1.7379], [-1.9151, -1.9776, -2.0173, ..., -1.7882, -1.5698, -1.7833]], [[-1.8044, -1.8044, -1.8044, ..., -1.8044, -1.8044, -1.8044], [-1.8044, -1.8044, -1.8044, ..., -1.8044, -1.8044, -1.8044], [-1.8044, -1.8044, -1.8044, ..., -1.8044, -1.7987, -1.7882], ..., [-1.7999, -1.8044, -1.8044, ..., -1.8044, -1.8044, -1.8044], [-1.8044, -1.8044, -1.8044, ..., -1.8044, -1.8044, -1.8044], [-1.8044, -1.8044, -1.8044, ..., -1.8044, -1.8044, -1.8044]]]], device=&#39;cuda:0&#39;) . with torch.no_grad(): output = learn.model.eval()(x) . act = hook_output.stored[0] . F.softmax(output, dim=-1) . tensor([[9.3069e-03, 9.8083e-01, 3.0847e-05, 1.2865e-05, 1.1578e-03, 4.2077e-04, 1.6482e-05, 8.6766e-05, 3.8656e-03, 7.4111e-05, 6.5331e-05, 5.8279e-04, 4.6459e-05, 1.0263e-04, 2.0953e-03, 1.3299e-04, 1.7882e-04, 2.1191e-04, 7.8174e-04]], device=&#39;cuda:0&#39;) . dls.vocab . [&#39;0&#39;, &#39;1&#39;, &#39;10&#39;, &#39;11&#39;, &#39;12&#39;, &#39;13&#39;, &#39;14&#39;, &#39;15&#39;, &#39;16&#39;, &#39;17&#39;, &#39;18&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;] . cam_map = torch.einsum(&#39;ck,kij-&gt;cij&#39;, learn.model[1][-1].weight, act) cam_map.shape . torch.Size([19, 8, 8]) . cam_map[1] . tensor([[-11.7976, -8.8484, -9.0233, -9.5797, -13.6296, -15.6943, -13.6190, -13.1508], [ -7.6053, -5.0152, -7.8845, -9.5468, -10.7061, -13.3279, -9.2101, -10.0630], [ -5.5384, -3.8083, -7.0739, -9.1266, -8.7326, -7.5732, -4.4432, -9.2882], [ -5.9409, -3.0918, -6.9509, -7.3649, -8.8905, -9.3576, -6.9014, -12.0372], [ -6.1369, -2.9236, -4.8785, -7.4147, -7.4539, -9.9532, -10.8462, -16.2405], [-10.1607, -7.5774, -7.2242, -11.0472, -8.8943, -9.8135, -13.6099, -21.2422], [-14.1123, -10.2740, -11.2755, -11.2595, -11.4919, -9.7790, -13.1679, -17.1019], [-21.0718, -15.0101, -14.2335, -12.5560, -12.0332, -15.0552, -19.4397, -19.5940]], device=&#39;cuda:0&#39;, grad_fn=&lt;SelectBackward&gt;) . x_dec = TensorImage(dls.train.decode((x,))[0][0]) _,ax = plt.subplots() x_dec.show(ctx=ax) ax.imshow(cam_map[1].detach().cpu(), alpha=0.5, extent=(0,256,256,0), interpolation=&#39;bilinear&#39;, cmap=&#39;nipy_spectral&#39;) . &lt;matplotlib.image.AxesImage at 0x18b2f6e66d0&gt; . time_now = datetime.now().strftime(format=&#39;%y%m%d-%H%M%S&#39;) model_name = f&#39;{time_now}_resnet18_e10_lr-003.pkl&#39; learn.export(fname=models_path/model_name) . Prediction: . Vi har ikke kunnet få Kaggle til at give os en score på vores model, da de vil vores predictions i en meget speciel og træls opsætning. . torch.cuda.empty_cache() . path = Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test&#39;) . images = get_image_files(path) images . (#2236) [Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/0040581b-f1f2-4fbe-b043-b6bfea5404bb_blue.png&#39;),Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/0040581b-f1f2-4fbe-b043-b6bfea5404bb_green.png&#39;),Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/0040581b-f1f2-4fbe-b043-b6bfea5404bb_red.png&#39;),Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/0040581b-f1f2-4fbe-b043-b6bfea5404bb_yellow.png&#39;),Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/004a270d-34a2-4d60-bbe4-365fca868193_blue.png&#39;),Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/004a270d-34a2-4d60-bbe4-365fca868193_green.png&#39;),Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/004a270d-34a2-4d60-bbe4-365fca868193_red.png&#39;),Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/004a270d-34a2-4d60-bbe4-365fca868193_yellow.png&#39;),Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/00537262-883c-4b37-a3a1-a4931b6faea5_blue.png&#39;),Path(&#39;Z:/cloud/data/hpa-single-cell-image-classification/test/00537262-883c-4b37-a3a1-a4931b6faea5_green.png&#39;)...] . learn_inf = load_learner(models_path/model_name, cpu=False) . test_dl = learn_inf.dls.test_dl(images) . item = test_dl.one_batch()[0] with learn_inf.no_bar(): predictions, _ = learn_inf.predict(item) . RuntimeError Traceback (most recent call last) &lt;ipython-input-40-d3f43f7a7a95&gt; in &lt;module&gt; -&gt; 1 item = test_dl.one_batch()[0] 2 3 with learn_inf.no_bar(): 4 predictions, _ = learn_inf.predict(item) 5 ~ anaconda3 envs fastai lib site-packages fastai data load.py in one_batch(self) 135 def one_batch(self): 136 if self.n is not None and len(self)==0: raise ValueError(f&#39;This DataLoader does not contain any batches&#39;) --&gt; 137 with self.fake_l.no_multiproc(): res = first(self) 138 if hasattr(self, &#39;it&#39;): delattr(self, &#39;it&#39;) 139 return res ~ anaconda3 envs fastai lib site-packages fastcore basics.py in first(x, f, negate, **kwargs) 545 x = iter(x) 546 if f: x = filter_ex(x, f=f, negate=negate, gen=True, **kwargs) --&gt; 547 return next(x, None) 548 549 # Cell ~ anaconda3 envs fastai lib site-packages fastai data load.py in __iter__(self) 99 self.before_iter() 100 self.__idxs=self.get_idxs() # called in context of main process (not workers/subprocesses) --&gt; 101 for b in _loaders[self.fake_l.num_workers==0](self.fake_l): 102 if self.device is not None: b = to_device(b, self.device) 103 yield self.after_batch(b) ~ anaconda3 envs fastai lib site-packages torch utils data dataloader.py in __next__(self) 433 if self._sampler_iter is None: 434 self._reset() --&gt; 435 data = self._next_data() 436 self._num_yielded += 1 437 if self._dataset_kind == _DatasetKind.Iterable and ~ anaconda3 envs fastai lib site-packages torch utils data dataloader.py in _next_data(self) 473 def _next_data(self): 474 index = self._next_index() # may raise StopIteration --&gt; 475 data = self._dataset_fetcher.fetch(index) # may raise StopIteration 476 if self._pin_memory: 477 data = _utils.pin_memory.pin_memory(data) ~ anaconda3 envs fastai lib site-packages torch utils data _utils fetch.py in fetch(self, possibly_batched_index) 32 raise StopIteration 33 else: &gt; 34 data = next(self.dataset_iter) 35 return self.collate_fn(data) 36 ~ anaconda3 envs fastai lib site-packages fastai data load.py in create_batches(self, samps) 108 self.it = iter(self.dataset) if self.dataset is not None else None 109 res = filter(lambda o:o is not None, map(self.do_item, samps)) --&gt; 110 yield from map(self.do_batch, self.chunkify(res)) 111 112 def new(self, dataset=None, cls=None, **kwargs): ~ anaconda3 envs fastai lib site-packages fastai data load.py in do_batch(self, b) 131 def create_item(self, s): return next(self.it) if s is None else self.dataset[s] 132 def create_batch(self, b): return (fa_collate,fa_convert)[self.prebatched](b) --&gt; 133 def do_batch(self, b): return self.retain(self.create_batch(self.before_batch(b)), b) 134 def to(self, device): self.device = device 135 def one_batch(self): ~ anaconda3 envs fastai lib site-packages fastai data load.py in create_batch(self, b) 130 def retain(self, res, b): return retain_types(res, b[0] if is_listy(b) else b) 131 def create_item(self, s): return next(self.it) if s is None else self.dataset[s] --&gt; 132 def create_batch(self, b): return (fa_collate,fa_convert)[self.prebatched](b) 133 def do_batch(self, b): return self.retain(self.create_batch(self.before_batch(b)), b) 134 def to(self, device): self.device = device ~ anaconda3 envs fastai lib site-packages fastai data load.py in fa_collate(t) 46 b = t[0] 47 return (default_collate(t) if isinstance(b, _collate_types) &gt; 48 else type(t[0])([fa_collate(s) for s in zip(*t)]) if isinstance(b, Sequence) 49 else default_collate(t)) 50 ~ anaconda3 envs fastai lib site-packages fastai data load.py in &lt;listcomp&gt;(.0) 46 b = t[0] 47 return (default_collate(t) if isinstance(b, _collate_types) &gt; 48 else type(t[0])([fa_collate(s) for s in zip(*t)]) if isinstance(b, Sequence) 49 else default_collate(t)) 50 ~ anaconda3 envs fastai lib site-packages fastai data load.py in fa_collate(t) 45 &#34;A replacement for PyTorch `default_collate` which maintains types and handles `Sequence`s&#34; 46 b = t[0] &gt; 47 return (default_collate(t) if isinstance(b, _collate_types) 48 else type(t[0])([fa_collate(s) for s in zip(*t)]) if isinstance(b, Sequence) 49 else default_collate(t)) ~ anaconda3 envs fastai lib site-packages torch utils data _utils collate.py in default_collate(batch) 53 storage = elem.storage()._new_shared(numel) 54 out = elem.new(storage) &gt; 55 return torch.stack(batch, 0, out=out) 56 elif elem_type.__module__ == &#39;numpy&#39; and elem_type.__name__ != &#39;str_&#39; 57 and elem_type.__name__ != &#39;string_&#39;: ~ anaconda3 envs fastai lib site-packages fastai torch_core.py in __torch_function__(self, func, types, args, kwargs) 323 convert=False 324 if _torch_handled(args, self._opt, func): convert,types = type(self),(torch.Tensor,) --&gt; 325 res = super().__torch_function__(func, types, args=args, kwargs=kwargs) 326 if convert: res = convert(res) 327 if isinstance(res, TensorBase): res.set_meta(self, as_copy=True) ~ anaconda3 envs fastai lib site-packages torch tensor.py in __torch_function__(cls, func, types, args, kwargs) 993 994 with _C.DisableTorchFunction(): --&gt; 995 ret = func(*args, **kwargs) 996 return _convert(ret, cls) 997 RuntimeError: stack expects each tensor to be equal size, but got [3, 2048, 2048] at entry 0 and [3, 3072, 3072] at entry 16 .",
            "url": "https://kaar1498.github.io/fastpages/jupyter/exercise/2021/05/25/Single-Cell-Classification-Exam.html",
            "relUrl": "/jupyter/exercise/2021/05/25/Single-Cell-Classification-Exam.html",
            "date": " • May 25, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "MY ICLR workshop notebook",
            "content": "from pathlib import Path import warnings warnings.filterwarnings(&#39;ignore&#39;) . path = Path(&#39;.&#39;) path.ls() . (#5) [Path(&#39;.ipynb_checkpoints&#39;),Path(&#39;ICLR.ipynb&#39;),Path(&#39;models&#39;),Path(&#39;test&#39;),Path(&#39;train&#39;)] . fns = get_image_files(path) fns . (#1486) [Path(&#39;test/008FWT.JPG&#39;),Path(&#39;test/00AQXY.JPG&#39;),Path(&#39;test/01OJZX.JPG&#39;),Path(&#39;test/07OXKK.jfif&#39;),Path(&#39;test/085IEC.jpg&#39;),Path(&#39;test/08O2YE.JPG&#39;),Path(&#39;test/08WLJO.jfif&#39;),Path(&#39;test/0E1VTP.jfif&#39;),Path(&#39;test/0GJFRQ.JPG&#39;),Path(&#39;test/0J3PQ7.JPG&#39;)...] . def get_y(r): return[Path(r).parent.name] . dblock = DataBlock((ImageBlock, MultiCategoryBlock), get_items=get_image_files, get_y=get_y, item_tfms=Resize(460), batch_tfms=aug_transforms(size=224, min_scale=0.75)) . dsets = dblock.datasets(path/&#39;train&#39;) dsets.train[0] . (PILImage mode=RGB size=259x194, TensorMultiCategory([0., 1., 0.])) . dls = dblock.dataloaders(path/&#39;train&#39;, num_workers=0) . dls.show_batch(max_n=8, nrows=2, unique=False) . learn = cnn_learner(dls, resnet18, metrics=accuracy_multi) learn.loss_func . lr_min,lr_steep = learn.lr_find() . print(f&quot;Minimum/10: {lr_min:.2e}, steepest point: {lr_steep:.2e}&quot;) . Minimum/10: 1.45e-02, steepest point: 3.31e-02 . learn.fine_tune(4) . epoch train_loss valid_loss accuracy_multi time . 0 | 0.954003 | 0.570648 | 0.750476 | 02:06 | . epoch train_loss valid_loss accuracy_multi time . 0 | 0.708740 | 0.507207 | 0.765714 | 02:08 | . 1 | 0.625947 | 0.436507 | 0.811429 | 02:09 | . 2 | 0.552557 | 0.397155 | 0.836190 | 02:12 | . 3 | 0.506624 | 0.387671 | 0.845714 | 02:11 | . df = pd.DataFrame(columns=[&#39;ID&#39;, &#39;leaf_rust&#39;, &#39;stem_rust&#39;, &#39;healthy_wheat&#39;]) with learn.no_bar(): for image in fns: file_id = image.name.split(&quot;.&quot;)[0] _,_,pred = learn.predict(image) new_row = { &#39;ID&#39;:file_id, &#39;leaf_rust&#39;:pred[2].item(), &#39;stem_rust&#39;:pred[1].item(), &#39;healthy_wheat&#39;:pred[0].item() } df.loc[file_id] = new_row . df.set_index(&#39;ID&#39;, inplace=True) . df = df.round(decimals=2) . df.to_csv(&quot;answer.csv&quot;) .",
            "url": "https://kaar1498.github.io/fastpages/jupyter/2021/03/22/ICLR.html",
            "relUrl": "/jupyter/2021/03/22/ICLR.html",
            "date": " • Mar 22, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "HOT OR NOT DOG?",
            "content": "path = Path() learn_inf = load_learner(path/&#39;export.pkl&#39;) btn_upload = widgets.FileUpload() out_pl = widgets.Output() lbl_pred = widgets.Label() . def on_data_change(change): lbl_pred.value = &#39;&#39; img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; . btn_upload.observe(on_data_change, names=[&#39;data&#39;]) . display(VBox([widgets.Label(&#39;Select your food!&#39;), btn_upload, out_pl, lbl_pred])) .",
            "url": "https://kaar1498.github.io/fastpages/jupyter/2021/02/16/HOTDOGGER.html",
            "relUrl": "/jupyter/2021/02/16/HOTDOGGER.html",
            "date": " • Feb 16, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "HOT-DIGGTY-DOG",
            "content": "key = os.environ.get(&#39;AZURE_SEARCH_KEY&#39;, &#39;60e43d3027704bf4b590419782a950fe&#39;) . food_types = &#39;hotdog&#39;, &#39;food -hotdog&#39;, &#39;sandwich&#39;, &#39;pizza&#39;, &#39;burger&#39; path = Path(&#39;food&#39;) . path.mkdir(exist_ok=True) for o in food_types: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_bing(key, f&#39;{o}&#39;) download_images(dest, urls=results.attrgot(&#39;contentUrl&#39;)) . fns = get_image_files(path) fns . (#691) [Path(&#39;food/burger/00000000.png&#39;),Path(&#39;food/burger/00000001.jpg&#39;),Path(&#39;food/burger/00000002.jpg&#39;),Path(&#39;food/burger/00000003.jpg&#39;),Path(&#39;food/burger/00000004.jpg&#39;),Path(&#39;food/burger/00000005.png&#39;),Path(&#39;food/burger/00000006.jpg&#39;),Path(&#39;food/burger/00000007.jpg&#39;),Path(&#39;food/burger/00000008.jpg&#39;),Path(&#39;food/burger/00000009.jpg&#39;)...] . failed = verify_images(fns) failed . (#29) [Path(&#39;food/burger/00000002.jpg&#39;),Path(&#39;food/burger/00000011.jpg&#39;),Path(&#39;food/burger/00000019.jpg&#39;),Path(&#39;food/burger/00000071.jpeg&#39;),Path(&#39;food/burger/00000074.jpg&#39;),Path(&#39;food/burger/00000077.jpg&#39;),Path(&#39;food/burger/00000117.jpg&#39;),Path(&#39;food/burger/00000124.jpg&#39;),Path(&#39;food/burger/00000142.jpg&#39;),Path(&#39;food/food -hotdog/00000029.jpg&#39;)...] . failed.map(Path.unlink); . foods = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . foods = foods.new(item_tfms=Resize(128), batch_tfms=aug_transforms(mult=2)) dls = foods.dataloaders(path) dls.train.show_batch(max_n=8, nrows=2, unique=True) . foods = foods.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = foods.dataloaders(path, num_workers=0) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . Downloading: &#34;https://download.pytorch.org/models/resnet18-5c106cde.pth&#34; to C: Users kaare/.cache torch hub checkpoints resnet18-5c106cde.pth . . epoch train_loss valid_loss error_rate time . 0 | 2.070469 | 0.634477 | 0.219697 | 00:40 | . C: Users kaare anaconda3 envs fastai lib site-packages PIL Image.py:951: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( C: Users kaare anaconda3 envs fastai lib site-packages PIL TiffImagePlugin.py:770: UserWarning: Possibly corrupt EXIF data. Expecting to read 27 bytes but only got 26. Skipping tag 33432 warnings.warn( . epoch train_loss valid_loss error_rate time . 0 | 0.857419 | 0.514266 | 0.181818 | 00:35 | . 1 | 0.665706 | 0.522546 | 0.143939 | 00:36 | . 2 | 0.544536 | 0.508737 | 0.143939 | 00:36 | . 3 | 0.487911 | 0.488599 | 0.143939 | 00:39 | . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . interp.plot_top_losses(5, nrows=1) . cleaner = ImageClassifierCleaner(learn) cleaner . learn.export() . path = Path() path.ls(file_exts=&#39;.pkl&#39;) . (#1) [Path(&#39;export.pkl&#39;)] .",
            "url": "https://kaar1498.github.io/fastpages/jupyter/2021/02/16/HOTDOG-UPLOADER.html",
            "relUrl": "/jupyter/2021/02/16/HOTDOG-UPLOADER.html",
            "date": " • Feb 16, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://kaar1498.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://kaar1498.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://kaar1498.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kaar1498.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}